# CWE Production Dashboard - Functional Specification (Version 4.0)

## 1. Objective
This document provides a comprehensive functional specification for the CWE Production Dashboard, which is contained within `index.html`. It details the application's architecture, user interface flow, core logic, data structures, and output formats. The application is a single-page web app embedded in a Google Sheets dialog, designed to process production data and generate schedules, tracking sheets, stickers, and interactive layouts.

---

## 2. Application Architecture & Flow

The application is a single-page web app that dynamically shows and hides different views to guide the user through a sequential workflow. It fetches data directly from the host Google Sheet, eliminating the need for file uploads.

### 2.1. Data Loading & Initialization
1.  **Initiation**: The user opens the dashboard from the "CWE Tools" > "Open CWE Dashboard" menu in Google Sheets.
2.  **Data Fetching**: A loading overlay (`#loading-overlay`) is immediately displayed. The `loadDataFromActiveSheet()` JavaScript function calls the `getSheetData()` function in the backend `Code.gs` script via `google.script.run`.
3.  **Data Processing**: The backend script reads data from the "Project Information," "Panel Legend," and "Casting Schedule" tabs. Upon successful return, the frontend `processData()` function parses this data into the `appState` object.
4.  **Navigation to Review**: The application then navigates to the Data Review Screen.

### 2.2. Views (Screens)
The application's UI is composed of several distinct views managed by the `Navigation` module.

#### 2.2.1. Data Review Screen
*   **Container ID**: [`#review-container`](index.html:417)
*   **Purpose**: To allow the user to verify the data parsed from the Google Sheet before proceeding.
*   **Content**: Displays tables for "Project Information," "Panel Legend," and "Casting Schedule."
*   **Actions**:
    *   **"Confirm and Generate Schedule"** (`#confirm-generate`): Proceeds to the Main Schedule View.

#### 2.2.2. Main Schedule View (Hub)
*   **Container ID**: [`#output`](index.html:433)
*   **Purpose**: The central hub of the application. It displays the generated casting schedule and provides navigation to all other modules.
*   **Entry Point**: Accessed after confirming the data on the review screen.
*   **Controls**: The main navigation bar ([`#output-controls`](index.html:70)) is visible here.

#### 2.2.3. Sticker Configuration Screen
*   **Container ID**: [`#sticker-settings-container`](index.html:437)
*   **Purpose**: Allows the user to configure layout settings for printable sticker sheets.
*   **Entry Point**: Accessed via the "Generate Stickers" button from the Main Schedule View.

#### 2.2.4. Sticker Sheet Preview
*   **Container ID**: [`#sticker-sheet-container`](index.html:481)
*   **Purpose**: Displays a preview of the generated sticker sheets.
*   **Entry Point**: Accessed after configuring settings and clicking "Generate & View Stickers".

#### 2.2.5. Tracking Sheet Preview
*   **Container ID**: [`#tracking-sheet-container`](index.html:482)
*   **Purpose**: Displays printable tracking sheets for quality control.
*   **Entry Point**: Accessed via the "Generate Tracking Sheet" button from the Main Schedule View.

#### 2.2.6. Casting Layout Visualization
*   **Container ID**: [`#casting-layout-container`](index.html:483)
*   **Purpose**: An interactive view for visualizing and arranging panel layouts for each cast.
*   **Entry Point**: Accessed via the "View Casting Layout" button from the Main Schedule View.

---

## 3. Core Technical Components

### 3.1. Navigation Module
The `Navigation` module is a key component in the `index.html` script, responsible for managing the application's single-page interface.

*   **Structure**: An immediately-invoked function expression (IIFE) that exposes a public API.
*   **Key Functions**:
    *   `showView(viewId)`: This is the primary function for controlling the UI. It hides all registered views and then displays only the view matching the provided `viewId`.
    *   `updateControls(viewId)`: This function is called by `showView` to dynamically adjust the visibility and state of navigation buttons (e.g., showing "Back to Schedule" in sub-views, adding dynamic "Print" buttons).
*   **How it Works**: It maintains a list of all view container IDs. When `showView` is called, it iterates through this list, setting the `display` style of the target view to `block` and all others to `none`. This creates the illusion of navigating between pages.

### 3.2. State Management (`appState`)
A global `appState` object holds all critical data after it has been parsed.
*   `panelLegend`: Object containing details for each panel type.
*   `castingSchedule`: Array of objects, where each object represents a day's cast.
*   `projectInfo`: Object with project metadata.
*   `layoutState`: A separate object manages the state for the interactive casting layout visualization, including form positions, rotations, and selected casting area.

### 3.3. Data Parsing
*   **`parseDim(dimStr)`**: A utility function that parses dimension strings (e.g., `10' 1/2"`) into a single numerical value in inches for calculations.
*   **`parseSheetAsKeyValue(data)`**: Parses a two-column sheet into a key-value object (used for Project Info).
*   **`parseSheetAsObjects(data, keyColumn)`**: Parses a tabular sheet into an object of objects, keyed by a specific column (used for Panel Legend).
*   **`parseCastingSchedule(data, panelLegend)`**: Intelligently finds the header row in the casting schedule and parses the cast data.

---

## 4. Output Generation
The application can generate three distinct types of outputs.

### 4.1. Casting Schedule
*   **Function**: `generateSchedule()`
*   **Output**: Renders the schedule from `appState.castingSchedule` into the [`#output`](index.html:433) container. It creates a separate table for each cast, listing the panels and their properties.

### 4.2. Panel Tracking Sheet
*   **Function**: `generateTrackingSheet()`
*   **Logic**: Assigns a unique, sequential ID to every single panel instance across all casts (e.g., `P21.01`, `P21.02`).
*   **Output**: Generates a table for each cast with rows for each unique panel instance and columns for manual QC check-offs.

### 4.3. Panel Stickers
*   **Function**: `generateStickers()`
*   **Logic**: Uses settings from the Sticker Configuration screen to dynamically generate CSS for the sticker layout. It then creates sticker HTML for each unique panel instance.
*   **Output**: Renders sticker sheets into the [`#sticker-sheet-container`](index.html:481), ready for printing.
